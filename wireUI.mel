// Declare global variables
global string $gWireSculptWindow;
global string $gFilePathField;
global string $gAAttractionSlider;
global string $gBAttractionSlider;
global string $gARepulsionSlider;
global string $gBRepulsionSlider;
global string $gKSlider;
global string $gMSlider;
global string $gLambdaSlider;
global string $gThicknessSlider;
global string $gOutputSlider;

// Function to create the GUI
global proc createWireSculptGUI() {
    // Declare global variables in this scope
    global string $gWireSculptWindow;
    global string $gFilePathField;
    global string $gAAttractionSlider;
    global string $gBAttractionSlider;
    global string $gARepulsionSlider;
    global string $gBRepulsionSlider;
    global string $gKSlider;
    global string $gMSlider;
    global string $gLambdaSlider;
    global string $gThicknessSlider;
    global string $gOutputSlider;

    // Delete the window if it already exists
    if (`window -exists $gWireSculptWindow`) {
        deleteUI $gWireSculptWindow;
    }

    // Create the window
    $gWireSculptWindow = `window -title "WireSculpt" -widthHeight 400 600`;
    $mainLayout = `columnLayout -adjustableColumn true`;

    // Heading
    text -label "WireSculpt Options" -font "boldLabelFont" -align "center";

    // File Upload Section
    string $fileGroup = `frameLayout -label "3D Model Input" -collapsable false`;
    columnLayout;
    $gFilePathField = `textField -placeholderText "File path..."`;
    button -label "Load from File" -command "loadFromFile";
    setParent ..;
    setParent ..;

    // Feature Attraction Weights
    string $attractionGroup = `frameLayout -label "Feature Attraction Weights" -collapsable false`;
    columnLayout;
    $gAAttractionSlider = `floatSliderGrp -label "Strength (a)" -field true -minValue 0.0 -maxValue 1.0 -value 0.5`;
    $gBAttractionSlider = `floatSliderGrp -label "Steepness (b)" -field true -minValue 0.0 -maxValue 1.0 -value 0.5`;
    setParent ..;
    setParent ..;

    // Path Repulsion Weights
    string $repulsionGroup = `frameLayout -label "Path Repulsion Weights" -collapsable false`;
    columnLayout;
    $gARepulsionSlider = `floatSliderGrp -label "Strength (a*)" -field true -minValue 0.0 -maxValue 1.0 -value 0.5`;
    $gBRepulsionSlider = `floatSliderGrp -label "Steepness (b*)" -field true -minValue 0.0 -maxValue 1.0 -value 0.5`;
    setParent ..;
    setParent ..;

    // Multi-Path Construction
    string $pathGroup = `frameLayout -label "Multi-Path Construction" -collapsable false`;
    columnLayout;
    $gKSlider = `intSliderGrp -label "Paths Expanded (K)" -field true -minValue 1 -maxValue 10 -value 5`;
    $gMSlider = `intSliderGrp -label "Paths to Keep (M)" -field true -minValue 1 -maxValue 10 -value 5`;
    setParent ..;
    setParent ..;

    string $lambdaGroup = `frameLayout -label "Custom lambda Value" -collapsable false`;
    columnLayout;
    $gLambdaSlider = `floatSliderGrp -label "lambda" -field true -minValue 0.0 -maxValue 1.0 -value 0.5`;
    setParent ..;
    setParent ..;

    // Thickness for NURBs Curve Extrusion
    string $thicknessGroup = `frameLayout -label "NURBs Curve Thickness" -collapsable false`;
    columnLayout;
    $gThicknessSlider = `floatSliderGrp -label "Thickness" -field true -minValue 0.1 -maxValue 10.0 -value 1.0`;
    setParent ..;
    setParent ..;

    // Output Path Slider
    string $outputGroup = `frameLayout -label "Output Paths" -collapsable false`;
    columnLayout;
    $gOutputSlider = `intSliderGrp -label "Output Path" -field true -minValue 1 -maxValue 10 -value 1`;
    setParent ..;
    setParent ..;

    // Buttons
    rowLayout -numberOfColumns 2;
    button -label "Generate Paths" -command "generatePaths";
    button -label "Cancel" -command "deleteUI $gWireSculptWindow";
    setParent ..;

    // Show the window
    showWindow $gWireSculptWindow;
}

// Function to load a file
global proc loadFromFile() {
    // Declare global variables in this scope
    global string $gFilePathField;

    // Open file dialog and get the selected file path(s)
    string $filePaths[] = `fileDialog2 -fileMode 1 -caption "Open 3D Model"`;

    // Check if the user selected a file
    if (size($filePaths) > 0) {
        // Update the file path field with the first selected file
        textField -edit -text $filePaths[0] $gFilePathField;
    } else {
        // If the user canceled the dialog, clear the field
        textField -edit -text "" $gFilePathField;
    }
}

// Function to generate paths
global proc generatePaths() {
    // Declare global variables in this scope
    global string $gFilePathField;
    global string $gAAttractionSlider;
    global string $gBAttractionSlider;
    global string $gARepulsionSlider;
    global string $gBRepulsionSlider;
    global string $gKSlider;
    global string $gMSlider;
    global string $gLambdaSlider;
    global string $gThicknessSlider;

    string $filePath = `textField -query -text $gFilePathField`;
    float $aAttraction = `floatSliderGrp -query -value $gAAttractionSlider`;
    float $bAttraction = `floatSliderGrp -query -value $gBAttractionSlider`;
    float $aRepulsion = `floatSliderGrp -query -value $gARepulsionSlider`;
    float $bRepulsion = `floatSliderGrp -query -value $gBRepulsionSlider`;
    int $K = `intSliderGrp -query -value $gKSlider`;
    int $M = `intSliderGrp -query -value $gMSlider`;
    float $lambda = `floatSliderGrp -query -value $gLambdaSlider`;
    float $thickness = `floatSliderGrp -query -value $gThicknessSlider`;

    // Print the parameters (replace this with your actual logic)
    //print("Starting process with the following parameters:\n");
    //print("File Path: " + $filePath + "\n");
    //print("Feature Attraction: a=" + $aAttraction + ", b=" + $bAttraction + "\n");
    //print("Path Repulsion: a*=" + $aRepulsion + ", b*=" + $bRepulsion + "\n");
    //print("Multi-Path Construction: K=" + $K + ", M=" + $M + "\n");
    //print("Custom lambda: " + $lambda + "\n");
    //print("Thickness: " + $thickness + "\n");
        
    WireSculpt -fp $filePath -asr $aAttraction -ase $bAttraction -rsr $aRepulsion -rse $bRepulsion -e $K -k $M -l $lambda -t $thickness;
    if (!`objExists "WireSculptNode1"`) {
        createNode WireSculptNode -n WireSculptNode1;
    }
    setAttr WireSculptNode1.inputMeshFile -type "string" $filePath;
    setAttr WireSculptNode1.rangeAttraction $aAttraction;
    setAttr WireSculptNode1.steepAttraction $bAttraction;
    setAttr WireSculptNode1.rangeRepulsion $aRepulsion;
    setAttr WireSculptNode1.steepRepulsion $bRepulsion;
    setAttr WireSculptNode1.lambdaError $lambda;
    setAttr WireSculptNode1.kValue $K;
    setAttr WireSculptNode1.mValue $M;
    setAttr WireSculptNode1.wireThickness $thickness;
    
}

// Create the GUI
createWireSculptGUI;